apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.codearte.nexus-staging'

configurations.all {
    // check for updates every build for dependencies with: 'changing: true'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenLocal()
    // Before LaunchDarkly release artifacts get synced to Maven Central they are here along with snapshots:
    maven { url "https://oss.sonatype.org/content/groups/public/" }
    mavenCentral()
}

allprojects {
    group = 'com.launchdarkly'
    version = "${version}"
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

ext.libraries = [:]

libraries.shaded = [
    "commons-codec:commons-codec:1.10",
    "com.google.guava:guava:19.0",
    "joda-time:joda-time:2.9.3",
    "com.launchdarkly:okhttp-eventsource:1.7.1",
    "redis.clients:jedis:2.9.0"
]

libraries.unshaded = [
    "com.google.code.gson:gson:2.7",
    "org.slf4j:slf4j-api:1.7.21"
]

libraries.testCompile = [
    "com.squareup.okhttp3:mockwebserver:3.10.0",
    "org.hamcrest:hamcrest-all:1.3",
    "org.easymock:easymock:3.4",
    "junit:junit:4.12"
]

libraries.testRuntime = [
    "ch.qos.logback:logback-classic:1.1.7"
]

dependencies {
    compile libraries.shaded, libraries.unshaded
    testCompile libraries.testCompile
    testRuntime libraries.testRuntime
    shadow libraries.unshaded
}

jar {
    baseName = 'launchdarkly-client'
    // thin classifier means that the non-shaded non-fat jar is still available
    // but is opt-in since users will have to specify it.
    classifier = 'thin'
    manifest {
        attributes("Implementation-Version": version)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.5.0-rc.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar, shadowJar
}

githubPages {
    repoUri = 'https://github.com/launchdarkly/java-client.git'
    pages {
        from javadoc
    }
    credentials {
        username = githubUser
        password = githubPassword
    }
}

shadowJar {
    baseName = 'launchdarkly-client'
    //no classifier means that the shaded jar becomes the default artifact
    classifier = ''

    // Don't shade or include slf4j
    dependencies{
        exclude(dependency('org.slf4j:.*:.*'))
        exclude(dependency('com.google.code.gson:.*:.*'))
    }

    // Shade all jars except for launchdarkly
    relocate('com', 'com.launchdarkly.shaded.com') {
        exclude("com.launchdarkly.client.*")
        exclude("com.google.gson.*")
        exclude("com.google.gson.annotations.*")
        exclude("com.google.gson.internal.*")
        exclude("com.google.gson.internal.bind.*")
        exclude("com.google.gson.internal.bind.util.*")
        exclude("com.google.gson.reflect.*")
        exclude("com.google.gson.stream.*")
    }
    relocate('okhttp3', 'com.launchdarkly.shaded.okhttp3')
    relocate('okio', 'com.launchdarkly.shaded.okio')
    relocate('org', 'com.launchdarkly.shaded.org') {
        exclude("org.slf4j.*")
        exclude("org.slf4j.event.*")
        exclude("org.slf4j.helpers.*")
        exclude("org.slf4j.spi.*")
    }
    relocate('redis', 'com.launchdarkly.shaded.redis')

    manifest {
        attributes("Implementation-Version": version)
    }
}

task shadowJarAll(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    baseName = 'launchdarkly-client'
    classifier = 'all'
    group = "shadow"
    description = "Builds a Shaded fat jar including SLF4J"
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

    // Shade all jars except for launchdarkly
    relocate('com', 'com.launchdarkly.shaded.com') {
        exclude("com.launchdarkly.client.*")
        exclude("com.google.gson.*")
        exclude("com.google.gson.annotations.*")
        exclude("com.google.gson.internal.*")
        exclude("com.google.gson.internal.bind.*")
        exclude("com.google.gson.internal.bind.util.*")
        exclude("com.google.gson.reflect.*")
        exclude("com.google.gson.stream.*")
    }
    relocate('okhttp3', 'com.launchdarkly.shaded.okhttp3')
    relocate('okio', 'com.launchdarkly.shaded.okio')
    relocate('org', 'com.launchdarkly.shaded.org') {
        exclude("org.slf4j.*")
        exclude("org.slf4j.event.*")
        exclude("org.slf4j.helpers.*")
        exclude("org.slf4j.spi.*")
    }
    relocate('redis', 'com.launchdarkly.shaded.redis')

    manifest {
        attributes("Implementation-Version": version)
    }
}

artifacts {
    archives shadowJarAll
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

signing {
    sign configurations.archives
}


idea {
    module {
        downloadJavadoc = true

        downloadSources = true
    }
}

nexusStaging {
    packageGroup = "com.launchdarkly"
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'LaunchDarkly SDK for Java'
                packaging 'jar'
                description 'Official LaunchDarkly SDK for Java'
                url 'https://github.com/launchdarkly/java-client'

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'jkodumal'
                        name 'John Kodumal'
                        email 'john@catamorphic.com'
                    }
                }

                scm {
                    connection 'scm:git:git://github.com/launchdarkly/java-client.git'
                    developerConnection 'scm:git:ssh:git@github.com:launchdarkly/java-client.git'
                    url 'https://github.com/launchdarkly/java-client'
                }
            }
        }
    }
}

